#!/bin/bash
#
# Script for finding duplicate movies
#
# Author: Johan Gardhage <johan.gardhage@gmail.com>
#

### Environment variables and default options ###

src=""
VERBOSE=false

baseNameArray=()
filePathArray=()

### Functions ###

collect_files()
{
  for d in $src; do
    echo Collecting files in $d ..
    for f in $d/*; do
      file=$(basename $f)
      # Skip subtitles
      if [[ $file =~ .*\.(srt|ass|ssa|sub|idx) ]]; then
        continue
      fi
      # Skip multi-file movies
      if [[ $file =~ .*\.D-[0-9]* ]]; then
        continue
      fi
      # Try to find the year by matching the first occurrence of four numbers
      year=$(echo $file | grep -Eo '[[:digit:]]{4}' | awk 'BEGIN{RS=" ";} {print $1}')
      # If the year is strange, keep looking ..
      if [[ $year -lt 1900 || ${file:0:4} == $year ]]; then
        if [[ $VERBOSE == true ]]; then
          echo Warning: File has strange year: $f
        fi
        # Try to find the year by matching the second occurrence of four numbers
        year=$(echo $file | grep -Eo '[[:digit:]]{4}' | awk 'BEGIN{RS=" ";} {print $2}')
        if [[ -z $year ]]; then
          echo Error: File has no proper year: $f
          continue
        fi
      fi
      # Store the file's full path and truncated name
      baseName=$(echo $file | sed "s/.$year.*/.$year/")
      baseNameArray+=("$baseName")
      filePathArray+=("$f")
    done
  done
}

print_duplicates()
{
  echo
  echo Finding duplicates ..
  # Find duplicates among the truncated names
  duplicates=$(echo ${baseNameArray[@]} | awk 'BEGIN{RS=" ";} {print $1}' | sort | uniq -d)
  # Print the full path of all files matching the duplicated names
  for d in $duplicates; do
    for f in ${filePathArray[@]}; do
      if [[ $f == */$d* ]]; then
        echo $f
      fi
    done
  done
}

usage()
{
  cat <<EOF
Usage: $(basename $0) [OPTION]... [FILE]...

Options:
 -h, --help     Display this help and exit.
 -v, --verbose  Enable verbose mode. This causes extra information to be written to standard output.
EOF
}

### Main ###

params=$(getopt -o "hv" -l "help,verbose" -n "$(basename $0)" -- "$@")

if [[ $? -ne 0 ]]; then
  usage
  exit 1
fi

eval set -- "$params"
unset params

while true; do
  case "$1" in
    -h | --help) usage; exit 0 ;;
    -v | --verbose) VERBOSE=true; shift ;;
    --) shift; break ;;
    *) usage; exit 1 ;;
  esac
done

for arg; do
  if [[ $arg == "." || $arg == "./" ]]; then
    arg=$PWD
  fi
  src+="$arg "
done

if [[ -z $src ]]; then
  usage
  exit 1
fi

### Find duplicate movies ###

collect_files
print_duplicates

exit 0
